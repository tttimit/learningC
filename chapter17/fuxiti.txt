17.11 复习题

1. 	包含数据类型的属性和能进行的操作

2. 	因为每一个节点中只包含了下一个节点的地址，所以只能由这个节点向下一个
	节点遍历。该节点没有保存上一个节点的地址，因此无法逆序遍历。修改数据
	中节点的属性，使其既包含前一个节点的地址，又包含下一个节点的地址，就
	可以双向遍历了。
   
3. 	ADT是abstract data type，抽象数据类型。是对一种数据类型的描述，包含
	数据类型的属性集和操作集，这一描述不应受到特定实现的限制，甚至不能
	受到特定编程语言的限制。
   
4.	1）使用指向队列的指针作为参数，优点是：在传递参数时消耗的空间很少，并且
	   所有的函数都使用的是指针，比较统一。缺点是：可能会对队列的内容产生意
	   的修改。就算使用了const修饰符来修饰指针，只是保证了指针指向的位置不变，
	   但是不能保证指向位置上的内容不变。	
	
	2）使用队列结构作为参数，优点是：在函数中使用的队列实际上是原来队列的
		一个拷贝，不会对原来的数据产生意外地修改。缺点是：如果原来的队列很大，
		在传递参数时消耗的空间就会很多。
		
5.	设计一个栈ADT，并完成接口。			
	非正式的抽象定义（模仿队列ADT）：
	栈：添加或删除只能在列表的一端进行。后进先出的数据形式。
		可以进行的操作：初始化、判空、判满、确定其中的项目个数、向栈添加项目、
			            删除项目、清空栈
	实现接口的数据表示：还是使用链表好一点，动态申请内存并分配指针。
	（定义的相关代码在chapter17/queue.h中）
	
6.	    如下表：
		| 项目数 |   顺序搜索   |   折半搜索   |
		|    3   |     3        |       2      |
		|   1023 |     1023     |      10      |        
		|  65535 |     65535    |      16      |

7.8 	要画，所以直接在纸上练习了。删除树中的节点分三种情况：
		1. 没有子树的节点：直接删除这个节点
		2. 有一个子树的节点；用子树代替本节点
		3. 有两个子树的节点：用左子树代替本节点，右子树放在左子树的右子树位置