The fabulous programmer enchanted the large 
Opens the filename pointed to by filename. The mode argument may be one of the following constant strings:
r	read text mode
w	write text mode (truncates file to zero length or creates new file)
a	append text mode for writing (opens or creates file and sets file pointer to the end-of-file)
rb	read binary mode
wb	write binary mode (truncates file to zero length or creates new file)
ab	append binary mode for writing (opens or creates file and sets file pointer to the end-of-file)
r+	read and write text mode
w+	read and write text mode (truncates file to zero length or creates new file)
a+	read and write text mode (opens or creates file and sets file pointer to the end-of-file)
r+b or rb+	read and write binary mode
w+b or wb+	read and write binary mode (truncates file to zero length or creates new file)
a+b or ab+	read and write binary mode (opens or creates file and sets file pointer to the end-of-file)
If the file does not exist and it is opened with read mode (r), then the open fails.

If the file is opened with append mode (a), then all write operations occur at the end of the file regardless of the current file position.

If the file is opened in the update mode (+), then output cannot be directly followed by input and input cannot be directly followed by output without an intervening fseek, fsetpos, rewind, or fflush.

On success a pointer to the file stream is returned. On failure a null pointer is returned.

2.12.3.8 fread

Declaration:

size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);
Reads data from the given stream into the array pointed to by ptr. It reads nmemb number of elements of size size. The total number of bytes read is (size*nmemb).
On success the number of elements read is returned. On error or end-of-file the total number of elements successfully read (which may be zero) is returned.

2.12.3.9 freopen

Declaration:

FILE *freopen(const char *filename, const char *mode, FILE *stream);
Associates a new filename with the given open stream. The old file in stream is closed. If an error occurs while closing the file, the error is ignored. The mode argument is the same as described in the fopen command. Normally used for reassociating stdin, stdout, or stderr.
On success the pointer to the stream is returned. On error a null pointer is returned.

2.12.3.10 fseek

Declaration:

int fseek(FILE *stream, long int offset, int whence);
Sets the file position of the stream to the given offset. The argument offset signifies the number of bytes to seek from the given whence position. The argument whence can be:
SEEK_SET	Seeks from the beginning of the file.
SEEK_CUR	Seeks from the current position.
SEEK_END	Seeks from the end of the file.
On a text stream, whence should be SEEK_SET and offset should be either zero or a value returned from ftell.

The end-of-file indicator is reset. The error indicator is NOT reset.

On success zero is returned. On error a nonzero value is returned.

2.12.3.11 fsetpos

Declaration:

int fsetpos(FILE *stream, const fpos_t *pos);
Sets the file position of the given stream to the given position. The argument pos is a position given 